buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath 'org.ajoberstar:gradle-git:1.3.2'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7"
}

group = 'de.mrmaffen'
version = '2.1.12'

allprojects {
    repositories {
        jcenter()
    }
    apply plugin: 'com.android.library'
    apply plugin: 'com.github.dcendents.android-maven'
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile "com.android.support:support-annotations:25.3.1"
}

def siteUrl = 'https://github.com/mrmaffen/vlc-android-sdk'
def gitUrl = 'https://github.com/mrmaffen/vlc-android-sdk.git'

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'libvlc-android'
                description 'Unofficial LibVlc for Android'
                groupId 'de.mrmaffen'
                artifactId 'libvlc-android'
                version '2.1.12'
                url siteUrl
                licenses {
                    license {
                        name 'GNU Lesser General Public License, Version 2.1 or later'
                        url 'http://www.gnu.org/licenses/lgpl-2.1.txt'
                    }
                }
                developers {
                    developer {
                        id 'mrmaffen'
                        name 'Enno Gottschalk'
                        email 'mrmaffen@googlemail.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

bintray {
    def Properties props = new Properties()
    def propFile = file('secrets.properties')
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))
    }
    user = props['BINTRAY_USER']
    key = props['BINTRAY_KEY']

    configurations = ['archives']
    pkg {
        repo = 'libvlc-android'
        name = 'libvlc-android'
        licenses = ['LGPL-2.1', 'LGPL-3.0']
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        issueTrackerUrl = 'https://github.com/mrmaffen/vlc-android-sdk/issues'
        labels = ['aar', 'android', 'libvlc', 'vlc']
        publicDownloadNumbers = true
        version {
            name = '2.1.12'
            desc = 'Unofficial LibVlc for Android'
            released = new Date()
            vcsTag = '2.1.12'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

import org.ajoberstar.grgit.Grgit

project.ext.vlcAndroidSource = file('vlc-android')
project.ext.vlcSource = file('vlc-android/vlc')

task cloneVlcAndroid << {
    Grgit.clone(uri: 'https://code.videolan.org/videolan/vlc-android.git',
            dir: project.ext.vlcAndroidSource)
}

// Only clone once.
cloneVlcAndroid.onlyIf { !project.ext.vlcAndroidSource.exists() }

task updateVlcCheckout(dependsOn: 'cloneVlcAndroid') << {
    try {
        def repo = Grgit.open(project.ext.vlcSource)
        repo.pull(rebase: true)
    }
    catch (RuntimeException e) {
        logger.warn("Wasn't able to update checkout at " + project.ext.vlcSource + ": "
                + e.getClass() + " - " + e.getLocalizedMessage());
    }
}

// Don't update vlc checkout if it doesn't exist yet.
// This is the case when we're building for the first time.
updateVlcCheckout.onlyIf { project.ext.vlcSource.exists() }

task purgeOldJniLibs(type: Delete, dependsOn: 'updateVlcCheckout') {
    delete "src/main/jniLibs"
}

task purgeOldJava(type: Delete, dependsOn: 'purgeOldJniLibs') {
    delete "src/main/java"
}

task compileVlcArmv7a(type: Exec) {
    environment "ANDROID_SDK", android.getSdkDirectory().getAbsolutePath()
    environment "ANDROID_NDK", android.getNdkDirectory().getAbsolutePath()
    workingDir project.ext.vlcAndroidSource
    commandLine './compile.sh'
    args "-a", "armeabi-v7a"
    args "release" // Remove this to build a debug libvlc
    args "-l" // only build libvlc
}

task buildVlcArmv7a(type: Copy, dependsOn: 'compileVlcArmv7a') {
    from(vlcAndroidSource.getAbsolutePath() + '/libvlc/jni/libs/armeabi-v7a/')
    into('src/main/jniLibs/armeabi-v7a/')
    finalizedBy 'copyLibVlcFiles'
}

task compileVlcArmv8a(type: Exec) {
    environment "ANDROID_SDK", android.getSdkDirectory().getAbsolutePath()
    environment "ANDROID_NDK", android.getNdkDirectory().getAbsolutePath()
    workingDir project.ext.vlcAndroidSource
    commandLine './compile.sh'
    args "-a", "arm64-v8a"
    args "release" // Remove this to build a debug libvlc
    args "-l" // only build libvlc
}

task buildVlcArmv8a(type: Copy, dependsOn: 'compileVlcArmv8a') {
    from(vlcAndroidSource.getAbsolutePath() + '/libvlc/jni/libs/arm64-v8a/')
    into('src/main/jniLibs/arm64-v8a/')
    finalizedBy 'copyLibVlcFiles'
}

task compileVlcMips(type: Exec) {
    environment "ANDROID_SDK", android.getSdkDirectory().getAbsolutePath()
    environment "ANDROID_NDK", android.getNdkDirectory().getAbsolutePath()
    workingDir project.ext.vlcAndroidSource
    commandLine './compile.sh'
    args "-a", "mips"
    args "release" // Remove this to build a debug libvlc
    args "-l" // only build libvlc
}

task buildVlcMips(type: Copy, dependsOn: 'compileVlcMips') {
    from(vlcAndroidSource.getAbsolutePath() + '/libvlc/jni/libs/mips/')
    into('src/main/jniLibs/mips/')
    finalizedBy 'copyLibVlcFiles'
}

task compileVlcX86(type: Exec) {
    environment "ANDROID_SDK", android.getSdkDirectory().getAbsolutePath()
    environment "ANDROID_NDK", android.getNdkDirectory().getAbsolutePath()
    workingDir project.ext.vlcAndroidSource
    commandLine './compile.sh'
    args "-a", "x86"
    args "release" // Remove this to build a debug libvlc
    args "-l" // only build libvlc
}

task buildVlcX86(type: Copy, dependsOn: 'compileVlcX86') {
    from(vlcAndroidSource.getAbsolutePath() + '/libvlc/jni/libs/x86/')
    into('src/main/jniLibs/x86/')
    finalizedBy 'copyLibVlcFiles'
}

task compileVlcX8664(type: Exec) {
    environment "ANDROID_SDK", android.getSdkDirectory().getAbsolutePath()
    environment "ANDROID_NDK", android.getNdkDirectory().getAbsolutePath()
    workingDir project.ext.vlcAndroidSource
    commandLine './compile.sh'
    args "-a", "x86_64"
    args "release" // Remove this to build a debug libvlc
    args "-l" // only build libvlc
}

task buildVlcX8664(type: Copy, dependsOn: 'compileVlcX8664') {
    from(vlcAndroidSource.getAbsolutePath() + '/libvlc/jni/libs/x86_64/')
    into('src/main/jniLibs/x86_64/')
    finalizedBy 'copyLibVlcFiles'
}

task copyLibVlcFiles(type: Copy) {
    from(vlcAndroidSource.getAbsolutePath() + '/libvlc/src/')
    into('src/main/java')
}

task buildLibVlc() {
}

buildLibVlc.dependsOn {
    tasks.findAll { task -> task.name.startsWith('buildVlc') }
}

tasks.withType(Javadoc).all { enabled = false }